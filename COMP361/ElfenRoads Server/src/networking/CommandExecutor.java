package networking;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.lang.Runnable;
// Start of user code for imports
// End of user code
import java.net.Socket;

import commands.ChooseBootCommand;
import commands.RemoteCommand;
import commands.TestCommand;


/**
 * CommandExecutor class definition.
 * Generated by the TouchCORE code generator.
 */

public class CommandExecutor implements Runnable {
    
    protected ObjectInputStream myInputStream;
    protected CommandChannel channel;
    
    public CommandExecutor(ObjectInputStream in, CommandChannel c) {
        this.myInputStream = in;
        this.channel = c;
    }

    public void run() {
    	
    	System.out.println("New client connection! Inside Command Executor now..");
 
        try {
            while (true) {
                Object readObject = myInputStream.readObject();
                RemoteCommand command = (RemoteCommand) readObject;
                
                if (command instanceof TestCommand)
                {
                	System.out.println("Just got a TestCommand command");
                	
                	SingleCommandExecutor plswork = new SingleCommandExecutor(command);
                    Thread thread = new Thread(plswork);
                    
                    System.out.println("created the new singlecommand executor and starting it up now");
                    thread.start();
                    
                    System.out.println("THIS PRINTS AFTER THE SINGLE COMMAND EXECUTOR THREAD.START SO IT MUST HAVE FINISHED");
                }
                
                else {
                	if(!(command.getClass() == ChooseBootCommand.class)) {
                    	
                    	echo(command);
                    }
                    
                    
                    command.execute();
                }
                
            }
        } catch (ClassNotFoundException e) {
            
        } catch (java.io.IOException e) {
            
        }
    }

    public ObjectInputStream getMyInputStream() {
        return this.myInputStream;
    }

    public boolean setMyInputStream(ObjectInputStream newObject) {
        this.myInputStream = newObject;
        return true;
    }
    
    public void echo(RemoteCommand cmd)
    {
    	
    	for(String ip : channel.getSockets().keySet())
    	{
    		channel.send(ip, cmd);
    	}
    }
}
