package networking;

import java.net.ServerSocket;
import java.net.InetAddress;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketAddress;
import java.lang.Thread;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;

import commands.AddPlayerCommand;
import commands.AllPlayersAddedCommand;
import commands.ChooseBootCommand;
import commands.FaceUpCardsCommand;
import commands.FinishRoundCommand;
import commands.GoldCardPileCommand;
import commands.RemoteCommand;
import commands.SendAuctionCountersCommand;
import commands.SendDrawRandomCounterCommand;
import commands.SendFaceUpCountersCommand;
import commands.SendTownCardCommand;
import commands.SetPlayerIndexCommand;
import commands.SetupRoundCommand;
import commands.StartAuctionPhaseCommand;
import commands.StartChooseVisibleCounterCommand;
import commands.StartDrawFaceUpCounterPhaseCommand;
import commands.StartElfengoldGameCommand;
import commands.StartGameCommand;
import commands.TestCommand;
import commands.TownValueCommand;
import commands.WinnerCommand;
import commands.sendDistributedCardsAndTCCommand;
import commands.SendFaceUpCardsCommand;
import commands.SendDrawRandomCardCommand;
import gamelogic.BootColor;
import gamelogic.Card;
import gamelogic.Counter;
import gamelogic.Player;
import gamelogic.Server;
import gamelogic.TownName;

import java.lang.Runnable;
import java.io.IOException;
import java.io.InputStream;
// Start of user code for imports
// End of user code

/**
 * CommandChannel class definition.
 * Generated by the TouchCORE code generator.
 */

public class CommandChannel implements Runnable {
    
    protected int myPort;
    public int numPlayers=7;
    private int currNumPlayers = 0;
    protected HashMap<String, Socket> sockets;
    protected HashMap<Socket, ObjectOutputStream> obstreams;
    
    public void setNumPlayers(int num) {
    	numPlayers = num;
    }
    
    public CommandChannel(int port) {
        this.myPort = port;
        this.sockets = new HashMap<String, Socket>();
        this.obstreams = new HashMap<Socket, ObjectOutputStream>();
        Thread thread = new Thread(this);
        thread.start();
    }

    public CommandChannel(String host,  int port) {
        this.myPort = port;
        sockets = new HashMap<String, Socket>();
        try {
            InetAddress hostInetAddress = InetAddress.getByName(host);
            Socket socket = new Socket(hostInetAddress, this.myPort);
            boolean added = addSocket(host, socket);
        } catch (java.net.UnknownHostException e) {
            
        } catch (java.io.IOException e) {
            
        }
        
    }

    public void send(String host,  RemoteCommand cmd) {
        Socket socket = getSocket(host);
        
        if(!obstreams.containsKey(socket))
        {
        	obstreams.put(socket, null);
        }
        
        try {
            if (socket == null) {
                socket = new Socket(host, this.myPort);
                boolean added = addSocket(host, socket);
            }
            OutputStream outputStream = socket.getOutputStream();
            
            ObjectOutputStream ob = obstreams.get(socket);
            
            if (ob == null){
                ObjectOutputStream objectoutputstream = new ObjectOutputStream(outputStream);
                ob = objectoutputstream;
                
                obstreams.put(socket, ob);
                
                ob.writeObject(cmd);
                ob.reset();
            } else {
            	
                ob.writeObject(cmd);
                ob.reset();
            }

        } catch (java.io.IOException e) {
            
        }
    }

    public void acceptCommandsFrom(String host) {
        Socket socket = getSocket(host);
        if (socket != null) {
            try {
                InputStream inputStream = socket.getInputStream();
                ObjectInputStream objectinputstream = new ObjectInputStream(inputStream);
                CommandExecutor executor = new CommandExecutor(objectinputstream, this);
                Thread thread = new Thread(executor);
                thread.start();
            } catch (java.io.IOException e) {
                
            }
        }
    }

    public void run() {
    	
        try {
            ServerSocket serversocket = new ServerSocket(this.myPort);
            
           
            while (true) {
            	
                Socket newConn = serversocket.accept();
                SocketAddress sa = newConn.getRemoteSocketAddress();
                String from = ((java.net.InetSocketAddress) sa).getHostName();
                
                System.out.println("Inside Command Channel now.. New client connection! " + from);
                boolean added = addSocket(from, newConn);
                
                System.out.println("Here! 1");
                InputStream inputStream = newConn.getInputStream();
                System.out.println("Here! 2");
                ObjectInputStream objectinputstream = new ObjectInputStream(inputStream);
                System.out.println("Here! 3");
                CommandExecutor create = new CommandExecutor(objectinputstream, this);
                System.out.println("Here! 4");
                Thread thread = new Thread(create);
                thread.start();
                System.out.println("Here! 5");
                
              
                currNumPlayers++;
                
                System.out.println("current amount of players: " + currNumPlayers);
                System.out.println("Amount of players total: " + numPlayers);

                
                if(currNumPlayers == numPlayers)
                {
                	
//                	try {
//            			Thread.sleep(5000);
//            		} catch (InterruptedException e) {
//            			// TODO Auto-generated catch block
//            			e.printStackTrace();
//            		}
                	
                	System.out.println("Current number of players is the same as the total number of players!");
                	//Once everyone has joined start sending the players
                    Server.sendPlayers();
                }

            }
        } catch (java.io.IOException e) {
            
        }
        
        
    }
    
    public void resetServer() {
    	
    	for(String s : sockets.keySet())
    	{
    		removeSocket(s);
    	}
    	
    	currNumPlayers = 0;
    	
//    	if(Server.instance().getGame() != null)
//    	{
//    		Server.instance().setGame();
//    	}
    }

    public boolean addSocket(String k,  Socket a) {
        Socket oldValue = sockets.put(k, a);
        return true;
    }

    public boolean removeSocket(String k) {
        Socket removed = sockets.remove(k);
        return true;
    }

    public Socket getSocket(String k) {
        Socket value = sockets.get(k);
        return value;
    }

    public boolean containsKeySockets(String k) {
        boolean containsKey = sockets.containsKey(k);
        return containsKey;
    }

    public boolean containsValueSockets(Socket a) {
        boolean containsValue = sockets.containsValue(a);
        return containsValue;
    }

    public String getKeyForSocket(Socket v) {
        /* TODO: No message view defined */
        return "";
    }

    public int sizeOfSockets() {
        int size = sockets.size();
        return size;
    }

    public HashMap<String, Socket> getSockets() {
        return this.sockets;
    }

    public CommandChannel() {
        this.sockets = new HashMap<String, Socket>();
    }
    
    
    public void sendStartGameCommand(String gameVariant) 
    {
    	StartGameCommand startgamecmd = new StartGameCommand(gameVariant);
    	
    	for(String ip : sockets.keySet())
    	{
    		send(ip, startgamecmd);
    	}
    	
    }
    
    public void setPlayer(String playerID)
    {
    	AddPlayerCommand addplayercmd = new AddPlayerCommand(playerID);    	    	
    	for(String ip : sockets.keySet())
    	{
    		System.out.println("Sending addplayercmd to: " + ip);
    		send(ip, addplayercmd);
    	}
    }
    
    public void allPlayersAdded()
    {
    	AllPlayersAddedCommand allplayersaddedcmd = new AllPlayersAddedCommand();
    	
    	for(String ip : sockets.keySet())
    	{
    		System.out.println("Sending to: " + ip);
    		send(ip, allplayersaddedcmd);
    	}
    }
    
    public void sendPlayerIndexArray(ArrayList<String> aPlayerArray) {
    	
    	SetPlayerIndexCommand setplayerindexcmd = new SetPlayerIndexCommand(aPlayerArray);
    	
    	for(String ip : sockets.keySet())
    	{
    		System.out.println("Sending to: " + ip);
    		send(ip, setplayerindexcmd);
    	}
    }
    
    public void executeSendBootInfo(String playerID, BootColor c)
    {
    	System.out.println("SERVER: INT THE EXECUTE SEND BOOT INFO FUNCTION");
    	
    	ChooseBootCommand choosebootcmd = new ChooseBootCommand(playerID, c);
    	
    	for(String ip : sockets.keySet())
    	{
    		System.out.println("Sending choosebootcmd to: " + ip);
    		send(ip, choosebootcmd);
    	}
    	
    }
    
   
    
    public void setupRound() {
    	
    	SetupRoundCommand setuproundcmd = new SetupRoundCommand();
    	
    	for(String ip : sockets.keySet())
    	{
    		send(ip, setuproundcmd);
    	}
    }
    
    public void startDrawFaceUpCounterPhase() {
    	
    	System.out.println("sending start draw face up counter phase");
    	
    	StartDrawFaceUpCounterPhaseCommand startdrawcountercmd = new StartDrawFaceUpCounterPhaseCommand();
    	
    	for(String ip : sockets.keySet())
    	{
    		System.out.println("Sending startdrawcountercmd to: " + ip);
    		send(ip, startdrawcountercmd);
    	}
    }
    
    public void startChooseVisibleCounterPhase() {
    	StartChooseVisibleCounterCommand chooseviscmd = new StartChooseVisibleCounterCommand();
    	
    	for(String ip : sockets.keySet())
    	{
    		send(ip, chooseviscmd);
    	}
    }
    
    public void startAuctionPhase() {
    	
    	StartAuctionPhaseCommand setuproundcmd = new StartAuctionPhaseCommand();
    	
    	for(String ip : sockets.keySet())
    	{
    		send(ip, setuproundcmd);
    	}
    }
    
    
	 public void setFaceUpCounters(ArrayList<Counter> faceUpCounters) {
	    	
	    	SendFaceUpCountersCommand sendfaceupcounterscmd = new SendFaceUpCountersCommand(faceUpCounters);
	    	
	    	for(String ip : sockets.keySet())
	    	{
	    		System.out.println("Sending sendfaceupcounterscmd to : " + ip);
	    		send(ip, sendfaceupcounterscmd);
	    	}
	    }
	 
	 public void setAuctionCounters(ArrayList<Counter> auctionCounters) {
	    	
	    	SendAuctionCountersCommand sendfaceupcounterscmd = new SendAuctionCountersCommand(auctionCounters);
	    	
	    	for(String ip : sockets.keySet())
	    	{
	    		System.out.println("Sending sendauctioncounterscmd to : " + ip);
	    		send(ip, sendfaceupcounterscmd);
	    	}
	    }
	 
	 public void setDistributedCardsAndTC(String playerID, Counter counter, ArrayList<Card> cards) {
	 	
	 	sendDistributedCardsAndTCCommand senddistributedcardsandtccmd = new sendDistributedCardsAndTCCommand(playerID, counter, cards);
	 	
	 	for(String ip : sockets.keySet())
	 	{
	 		System.out.println("Sending distributedcardsandtccmd to : " + ip);
	 		send(ip, senddistributedcardsandtccmd);
	 	}
	 }
	 
	 public void setDistributedCardsAndTCElfenGold(String playerID, ArrayList<Counter> counters, ArrayList<Card> cards) {
		 	
		 	sendDistributedCardsAndTCCommand senddistributedcardsandtccmd = new sendDistributedCardsAndTCCommand(playerID, counters, cards);
		 	
		 	for(String ip : sockets.keySet())
		 	{
		 		System.out.println("Sending distributedcardsandtccmd to : " + ip);
		 		send(ip, senddistributedcardsandtccmd);
		 	}
		 }
	 
	 public void sendBootCommand(String playerID, BootColor c)
	 {
		 ChooseBootCommand choosebootcmd = new ChooseBootCommand(playerID, c);
		 
		 for(String ip : sockets.keySet())
		 	{
		 		send(ip, choosebootcmd);
		 	}
	 }
	 public void sendTownCardCommand(String playerID, TownName townName)
	 {
		 SendTownCardCommand sendtowncardcmd = new SendTownCardCommand(playerID, townName);
		 
		 for(String ip : sockets.keySet())
		 	{
		 		send(ip, sendtowncardcmd);
		 	}
	 }
	 
	 public void sendChooseCounterCommand(Counter counter)
	 {
		 SendDrawRandomCounterCommand senddrawrandomcountercommand = new SendDrawRandomCounterCommand(counter);
		 
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending senddrawrandomcountercommand to : " + ip);
			 
		 		send(ip, senddrawrandomcountercommand);
		 	}
	 }
	 
	 public void sendFinishRoundCommand() {
		 FinishRoundCommand finishroundcommand = new FinishRoundCommand();
		 
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending finishroundcommand to : " + ip);
			 
		 		send(ip, finishroundcommand);
		 	}
	 }
	 
	 
	 public void sendWinnerCommand(String playerName) {
		 WinnerCommand winnercommand = new WinnerCommand(playerName);
		 
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending winnercommand to : " + ip);
			 
		 		send(ip, winnercommand);
		 	}
	 }
	 
	 public void sendStartElfengoldGame(String gameVariant) {
		 StartElfengoldGameCommand command = new StartElfengoldGameCommand(gameVariant);
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending StartElfengoldGameCommand to : " + ip);
			 
		 		send(ip, command);
		 	}
		 
		 
	 }
	 
	 public void sendTownValue(TownName tn, int num) {
		 TownValueCommand command = new TownValueCommand(tn, num);
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending TownValueCommand to : " + ip);
			 
		 		send(ip, command);
		 	}
		 
		 
	 }
	 
	 public void sendFaceUpCardsCommand(ArrayList<Card> pFaceUpCards) {
		 FaceUpCardsCommand command = new FaceUpCardsCommand(pFaceUpCards);
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending FaceUpCardsCommand to : " + ip);
			 
		 		send(ip, command);
		 	}
		 
		 
	 }
	 
	 
	 public void sendGoldCardPileCommand(int pGoldCards) {
		 
		 GoldCardPileCommand command = new GoldCardPileCommand(pGoldCards);
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending GoldCardPileCommand to : " + ip);
			 
		 		send(ip, command);
		 	}
		 
		 
	 }
	 
	 /*
	 public void sendSetGoldCommand(String player, int goldAmount) {
		 
		 SetGoldCommand command = new SetGoldCommand(player,goldAmount);
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending SetGoldCommand to : " + ip);
			 
		 		send(ip, command);
		 	}
		 
		 
	 }
	 */
	 
	 
	 public void sendDrawFaceUpCardCommand(Card card) {
		 
		 SendFaceUpCardsCommand command = new SendFaceUpCardsCommand(card);
		 
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending SendFaceUpCardsCommand to : " + ip);
			 
		 		send(ip, command);
		 	}
		 
		 
	 }
	 
	 
	 public void sendDrawRandomCardCommand(Card pCard) {
		 
		 SendDrawRandomCardCommand command = new SendDrawRandomCardCommand(pCard);
		 for(String ip : sockets.keySet())
		 	{
			 	System.out.println("Sending SendDrawRandomCardCommand to : " + ip);
			 
		 		send(ip, command);
		 	}
		 
		 
	 } 
}
